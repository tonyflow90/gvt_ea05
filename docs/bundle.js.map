{"version":3,"file":"bundle.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat4.js","../src/shader/VertexShader.js","../src/shader/FragmentShader.js","../src/shapes/Cone.js","../src/shapes/Sphere.js","../src/App1.js","../src/shapes/RecursiveSphere.js","../src/App2.js","../src/main.js"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","export let VertexShader = `\r\n    attribute vec3 aPosition;\r\n    attribute vec3 aNormal;\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n\r\n    varying vec4 vColor;\r\n\r\n    void main(){\r\n        gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);\r\n\r\n        vColor = vec4(aNormal.x, aNormal.y, aNormal.z, 1.0);\r\n        vColor = (vColor + 1.0) / 2.0;\r\n    }\r\n`","export let FragmentShader = `\r\n    precision mediump float;\r\n    varying vec4 vColor;\r\n\r\n    void main() {\r\n        gl_FragColor = vColor;\r\n    }\r\n`","let createConeShape = () => {\r\n    let n = 10;\r\n    let m = 10;\r\n    // Positions.\r\n    let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Normals\r\n    let normals = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Index data.\r\n    let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n    let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n    let du = 2 * Math.PI / n;\r\n    let dv = 1 / m;\r\n    let r = 0.8;\r\n\r\n    // Counter for entries in index array.\r\n    let iLines = 0;\r\n    let iTris = 0;\r\n\r\n    // Loop angle u.\r\n    for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n        // Loop height v.\r\n        for (let j = 0, v = 0; j <= m; j++, v += dv) {\r\n\r\n            let iVertex = i * (m + 1) + j;\r\n\r\n            let x, y, z = 0;\r\n            x = v * Math.cos(u) + 1;\r\n            y = v * Math.sin(u);\r\n            z = -v + 0.5; // v\r\n\r\n            // Set vertex positions.\r\n            vertices[iVertex * 3] = x;\r\n            vertices[iVertex * 3 + 1] = z;\r\n            vertices[iVertex * 3 + 2] = y;\r\n\r\n            // Calc and set normals.\r\n            var nx = Math.cos(u);\r\n            var ny = Math.sin(v);\r\n            var nz = 0.5;\r\n            normals[iVertex * 3] = nx;\r\n            normals[iVertex * 3 + 1] = ny;\r\n            normals[iVertex * 3 + 2] = nz;\r\n\r\n\r\n            // Set index.\r\n            // Line on beam.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - 1;\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n            // Line on ring.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - (m + 1);\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n\r\n            // Set index.\r\n            // Two Triangles.\r\n            if (j > 0 && i > 0) {\r\n                indicesTris[iTris++] = iVertex;\r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n                //                            \r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n            }\r\n        }\r\n    }\r\n    return { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\r\n}\r\n\r\nexport let Cone = createConeShape();\r\n\r\n// export default class Cone {\r\n//     constructor(n = 10, m = 10) {\r\n//         this.n = n;\r\n//         this.m = m;\r\n//     }\r\n\r\n//     createShape() {\r\n//         let n = this.n;\r\n//         let m = this.m;\r\n//         // Positions.\r\n//         let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n//         // Index data.\r\n//         let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n//         let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n//         let du = 2 * Math.PI / n;\r\n//         let dv = 1 / m;\r\n//         let r = 0.8;\r\n\r\n//         // Counter for entries in index array.\r\n//         let iLines = 0;\r\n//         let iTris = 0;\r\n\r\n//         // Loop angle u.\r\n//         for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n//             // Loop height v.\r\n//             for (let j = 0, v = 0; j <= m; j++, v += dv) {\r\n\r\n//                 let iVertex = i * (m + 1) + j;\r\n\r\n//                 let x, y, z = 0;\r\n//                 x = v * Math.cos(u);\r\n//                 z = v * Math.sin(u);\r\n//                 y = -v + 0.5; // v\r\n\r\n//                 // Set vertex positions.\r\n//                 vertices[iVertex * 3] = x;\r\n//                 vertices[iVertex * 3 + 1] = y;\r\n//                 vertices[iVertex * 3 + 2] = z;\r\n\r\n//                 // Set index.\r\n//                 // Line on beam.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesLines[iLines++] = iVertex - 1;\r\n//                     indicesLines[iLines++] = iVertex;\r\n//                 }\r\n//                 // Line on ring.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesLines[iLines++] = iVertex - (m + 1);\r\n//                     indicesLines[iLines++] = iVertex;\r\n//                 }\r\n\r\n//                 // Set index.\r\n//                 // Two Triangles.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesTris[iTris++] = iVertex;\r\n//                     indicesTris[iTris++] = iVertex - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1);\r\n//                     //                            \r\n//                     indicesTris[iTris++] = iVertex - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1);\r\n//                 }\r\n//             }\r\n//         }\r\n//         return [vertices, indicesLines, indicesTris];\r\n//     }\r\n// }\r\n","let createSphereShape = () => {\r\n    let n = 10;\r\n    let m = 10;\r\n    let r = 0.8;\r\n\r\n    // Positions.\r\n    let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Normals\r\n    let normals = new Float32Array(3 * (n + 1) * (m + 1));\r\n    // Index data.\r\n    let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n    let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n    let du = 2 * Math.PI / n;\r\n    let dv = Math.PI / m;\r\n\r\n    // Counter for entries in index array.\r\n    let iLines = 0;\r\n    let iTris = 0;\r\n\r\n    // Loop angle u.\r\n    for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n        // Loop height v.\r\n        for (let j = 0, v = 0; j <= m; j++, v += dv) {\r\n\r\n            let iVertex = i * (m + 1) + j;\r\n\r\n            let x, y, z = 0;\r\n            x = r * Math.sin(v) * Math.cos(u) - 1;\r\n            y = r * Math.sin(v) * Math.sin(u);\r\n            z = r * Math.cos(v);\r\n\r\n            // Set vertex positions.\r\n            vertices[iVertex * 3] = x;\r\n            vertices[iVertex * 3 + 1] = z;\r\n            vertices[iVertex * 3 + 2] = y;\r\n\r\n            // Calc and set normals.\r\n            var nx = Math.sin(v) * Math.cos(u);\r\n            var ny = Math.sin(v) * Math.sin(u);\r\n            var nz = Math.cos(v);\r\n            normals[iVertex * 3] = nx;\r\n            normals[iVertex * 3 + 1] = nz;\r\n            normals[iVertex * 3 + 2] = ny;\r\n\r\n            // Set index.\r\n            // Line on beam.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - 1;\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n            // Line on ring.\r\n            if (j > 0 && i > 0) {\r\n                indicesLines[iLines++] = iVertex - (m + 1);\r\n                indicesLines[iLines++] = iVertex;\r\n            }\r\n\r\n            // Set index.\r\n            // Two Triangles.\r\n            if (j > 0 && i > 0) {\r\n                indicesTris[iTris++] = iVertex;\r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n                //                            \r\n                indicesTris[iTris++] = iVertex - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n                indicesTris[iTris++] = iVertex - (m + 1);\r\n            }\r\n        }\r\n    }\r\n    return { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\r\n}\r\n\r\nexport let Sphere = createSphereShape();\r\n// export default class Sphere {\r\n//     constructor(n = 32, m = 32, r = 0.8) {\r\n//         this.n = n;\r\n//         this.m = m;\r\n//         this.r = r;\r\n//     }\r\n\r\n//     createShape() {\r\n//         let n = this.n;\r\n//         let m = this.m;\r\n//         let r = this.r;\r\n\r\n//         // Positions.\r\n//         let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n//         // Index data.\r\n//         let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n//         let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n//         let du = 2 * Math.PI / n;\r\n//         let dv = Math.PI / m;\r\n\r\n//         // Counter for entries in index array.\r\n//         let iLines = 0;\r\n//         let iTris = 0;\r\n\r\n//         // Loop angle u.\r\n//         for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n//             // Loop height v.\r\n//             for (let j = 0, v = 0; j <= m; j++, v += dv) {\r\n\r\n//                 let iVertex = i * (m + 1) + j;\r\n\r\n//                 let x, y, z = 0;\r\n//                 x = r * Math.sin(v) * Math.cos(u);\r\n//                 z = r * Math.sin(v) * Math.sin(u);\r\n//                 y = r * Math.cos(v);\r\n\r\n//                 // Set vertex positions.\r\n//                 vertices[iVertex * 3] = x;\r\n//                 vertices[iVertex * 3 + 1] = y;\r\n//                 vertices[iVertex * 3 + 2] = z;\r\n\r\n//                 // Set index.\r\n//                 // Line on beam.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesLines[iLines++] = iVertex - 1;\r\n//                     indicesLines[iLines++] = iVertex;\r\n//                 }\r\n//                 // Line on ring.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesLines[iLines++] = iVertex - (m + 1);\r\n//                     indicesLines[iLines++] = iVertex;\r\n//                 }\r\n\r\n//                 // Set index.\r\n//                 // Two Triangles.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesTris[iTris++] = iVertex;\r\n//                     indicesTris[iTris++] = iVertex - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1);\r\n//                     //                            \r\n//                     indicesTris[iTris++] = iVertex - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1);\r\n//                 }\r\n//             }\r\n//         }\r\n//         return [vertices, indicesLines, indicesTris];\r\n\r\n//         let n = this.n;\r\n//         let m = this.m;\r\n//         // Positions.\r\n//         let vertices = new Float32Array(3 * (n + 1) * (m + 1));\r\n//         // Index data.\r\n//         let indicesLines = new Uint16Array(2 * 2 * n * m);\r\n//         let indicesTris = new Uint16Array(3 * 2 * n * m);\r\n\r\n//         let du = 2 * Math.PI / n;\r\n//         let dv = 1 / m;\r\n//         let r = 0.8;\r\n\r\n//         // Counter for entries in index array.\r\n//         let iLines = 0;\r\n//         let iTris = 0;\r\n\r\n//         // Loop angle u.\r\n//         for (let i = 0, u = 0; i <= n; i++, u += du) {\r\n//             // Loop height v.\r\n//             for (let j = 0, v = 0; j <= m; j++, v += dv) {\r\n\r\n//                 let iVertex = i * (m + 1) + j;\r\n\r\n//                 let x, y, z = 0;\r\n//                 x = v * Math.cos(u);\r\n//                 z = v * Math.sin(u);\r\n//                 y = -v + 0.5; // v\r\n\r\n//                 // Set vertex positions.\r\n//                 vertices[iVertex * 3] = x;\r\n//                 vertices[iVertex * 3 + 1] = y;\r\n//                 vertices[iVertex * 3 + 2] = z;\r\n\r\n//                 // Set index.\r\n//                 // Line on beam.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesLines[iLines++] = iVertex - 1;\r\n//                     indicesLines[iLines++] = iVertex;\r\n//                 }\r\n//                 // Line on ring.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesLines[iLines++] = iVertex - (m + 1);\r\n//                     indicesLines[iLines++] = iVertex;\r\n//                 }\r\n\r\n//                 // Set index.\r\n//                 // Two Triangles.\r\n//                 if (j > 0 && i > 0) {\r\n//                     indicesTris[iTris++] = iVertex;\r\n//                     indicesTris[iTris++] = iVertex - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1);\r\n//                     //                            \r\n//                     indicesTris[iTris++] = iVertex - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1) - 1;\r\n//                     indicesTris[iTris++] = iVertex - (m + 1);\r\n//                 }\r\n//             }\r\n//         }\r\n//         return [vertices, indicesLines, indicesTris];\r\n//     }\r\n// }\r\n","\r\nimport * as mat4 from 'gl-matrix/esm/mat4.js';\r\n\r\nimport { VertexShader } from './shader/VertexShader.js';\r\nimport { FragmentShader } from './shader/FragmentShader.js';\r\n\r\nimport { Cone } from './shapes/Cone.js';\r\nimport { Sphere } from './shapes/Sphere.js';\r\n\r\nlet App = (function () {\r\n\r\n    let gl;\r\n\r\n    // The shader program object is also used to\r\n    // store attribute and uniform locations.\r\n    let prog;\r\n\r\n    // Array of model objects.\r\n    let models = [];\r\n\r\n    let camera = {\r\n        // Initial position of the camera.\r\n        eye: [0, 1, 4],\r\n        // Point to look at.\r\n        center: [0, 0, 0],\r\n        // Roll and pitch of the camera.\r\n        up: [0, 1, 0],\r\n        // Opening angle given in radian.\r\n        // radian = degree*2*PI/360.\r\n        fovy: 60.0 * Math.PI / 180,\r\n        // Camera near plane dimensions:\r\n        // value for left right top bottom in projection.\r\n        lrtb: 2.0,\r\n        // View matrix.\r\n        vMatrix: mat4.create(),\r\n        // Projection matrix.\r\n        pMatrix: mat4.create(),\r\n        // Projection types: ortho, perspective, frustum.\r\n        projectionType: \"ortho\",\r\n        // Angle to Z-Axis for camera when orbiting the center\r\n        // given in radian.\r\n        zAngle: 0,\r\n        // Angle to Z-Axis for camera when orbiting the center\r\n        // given in radian.\r\n        yAngle: 0,\r\n        // Distance in XZ-Plane from center when orbiting.\r\n        distance: 4,\r\n    };\r\n\r\n    function start() {\r\n        init();\r\n        render();\r\n    }\r\n\r\n    function init() {\r\n        initWebGL();\r\n        initShaderProgram();\r\n        initUniforms()\r\n        initModels();\r\n        initEventHandler();\r\n        initPipline();\r\n    }\r\n\r\n    function initWebGL() {\r\n        // Get canvas and WebGL context.\r\n        // canvas = document.getElementById('canvas1');\r\n        let canvas = document.querySelector('#canvas1');\r\n        gl = canvas.getContext('webgl');\r\n        gl.viewportWidth = canvas.width;\r\n        gl.viewportHeight = canvas.height;\r\n    }\r\n\r\n    /**\r\n     * Init pipeline parameters that will not change again.\r\n     * If projection or viewport change, their setup must\r\n     * be in render function.\r\n     */\r\n    function initPipline() {\r\n        gl.clearColor(.95, .95, .95, 1);\r\n\r\n        // Backface culling.\r\n        gl.frontFace(gl.CCW);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n\r\n        // Depth(Z)-Buffer.\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        // Polygon offset of rastered Fragments.\r\n        gl.enable(gl.POLYGON_OFFSET_FILL);\r\n        gl.polygonOffset(0.5, 0);\r\n\r\n        // Set viewport.\r\n        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\r\n\r\n        // Init camera.\r\n        // Set projection aspect ratio.\r\n        camera.aspect = gl.viewportWidth / gl.viewportHeight;\r\n    }\r\n\r\n    function initShaderProgram() {\r\n        // Init vertex shader.\r\n        let vs = initShader(gl.VERTEX_SHADER, VertexShader);\r\n        // Init fragment shader.\r\n        let fs = initShader(gl.FRAGMENT_SHADER, FragmentShader);\r\n        // Link shader into a shader program.\r\n        prog = gl.createProgram();\r\n        gl.attachShader(prog, vs);\r\n        gl.attachShader(prog, fs);\r\n        gl.bindAttribLocation(prog, 0, \"aPosition\");\r\n        gl.linkProgram(prog);\r\n        gl.useProgram(prog);\r\n    }\r\n\r\n    /**\r\n     * Create and init shader from source.\r\n     * \r\n     * @parameter shaderType: openGL shader type.\r\n     * @parameter SourceTagId: Id of HTML Tag with shader source.\r\n     * @returns shader object.\r\n     */\r\n    function initShader(shaderType, shaderSource) {\r\n        let shader = gl.createShader(shaderType);\r\n        // let shaderSource = document.getElementById(SourceTagId).text;\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log(SourceTagId + \": \" + gl.getShaderInfoLog(shader));\r\n            return null;\r\n        }\r\n        return shader;\r\n    }\r\n\r\n    function initUniforms() {\r\n        // Projection Matrix.\r\n        prog.pMatrixUniform = gl.getUniformLocation(prog, \"uPMatrix\");\r\n\r\n        // Model-View-Matrix.\r\n        prog.mvMatrixUniform = gl.getUniformLocation(prog, \"uMVMatrix\");\r\n    }\r\n\r\n    function initModels() {\r\n        // fill-style\r\n        let fs = \"fillwireframe\";\r\n        // createModel(Torus, fs);\r\n        createModel(Cone, fs);\r\n        createModel(Sphere, fs);\r\n    }\r\n\r\n    /**\r\n     * Create model object, fill it and push it in models array.\r\n     * \r\n     * @parameter geometryname: string with name of geometry.\r\n     * @parameter fillstyle: wireframe, fill, fillwireframe.\r\n     */\r\n    function createModel(geometry, fillstyle) {\r\n        let model = {};\r\n        model.fillstyle = fillstyle;\r\n        initDataAndBuffers(model, geometry);\r\n        // Create and initialize Model-View-Matrix.\r\n        model.mvMatrix = mat4.create();\r\n\r\n        models.push(model);\r\n    }\r\n\r\n    /**\r\n     * Init data and buffers for model object.\r\n     * \r\n     * @parameter model: a model object to augment with data.\r\n     * @parameter geometryname: string with name of geometry.\r\n     */\r\n    function initDataAndBuffers(model, geometry) {\r\n        // Provide model object with vertex data arrays.\r\n        // Fill data arrays for Vertex-Positions, Normals, Index data:\r\n        // vertices, normals, indicesLines, indicesTris;\r\n        // Pointer this refers to the window.\r\n        // this[geometryname]['createVertexData'].apply(model);\r\n        Object.assign(model, geometry);\r\n\r\n        // Setup position vertex buffer object.\r\n        model.vboPos = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n        gl.bufferData(gl.ARRAY_BUFFER, model.vertices, gl.STATIC_DRAW);\r\n        // Bind vertex buffer to attribute variable.\r\n        prog.positionAttrib = gl.getAttribLocation(prog, 'aPosition');\r\n        gl.enableVertexAttribArray(prog.positionAttrib);\r\n\r\n        // Setup normal vertex buffer object.\r\n        model.vboNormal = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n        gl.bufferData(gl.ARRAY_BUFFER, model.normals, gl.STATIC_DRAW);\r\n        // Bind buffer to attribute variable.\r\n        prog.normalAttrib = gl.getAttribLocation(prog, 'aNormal');\r\n        gl.enableVertexAttribArray(prog.normalAttrib);\r\n\r\n        // Setup lines index buffer object.\r\n        model.iboLines = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesLines,\r\n            gl.STATIC_DRAW);\r\n        model.iboLines.numberOfElements = model.indicesLines.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        // Setup triangle index buffer object.\r\n        model.iboTris = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesTris,\r\n            gl.STATIC_DRAW);\r\n        model.iboTris.numberOfElements = model.indicesTris.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n\r\n    function initEventHandler() {\r\n\r\n        var deltaRotate = Math.PI / 36;\r\n\r\n\r\n        window.onkeydown = function (evt) {\r\n            let key = evt.which ? evt.which : evt.keyCode;\r\n            let c = String.fromCharCode(key);\r\n\r\n            // Change projection of scene.\r\n            switch (c) {\r\n                case ('W'):\r\n                    // Orbit camera.\r\n                    camera.yAngle -= deltaRotate;\r\n                    break;\r\n                case ('A'):\r\n                    // Orbit camera.\r\n                    camera.zAngle += deltaRotate;\r\n                    break;\r\n                case ('S'):\r\n                    // Orbit camera.\r\n                    camera.yAngle += deltaRotate;\r\n                    break;\r\n                case ('D'):\r\n                    // Orbit camera.\r\n                    camera.zAngle -= deltaRotate;\r\n                    break;\r\n            }\r\n\r\n            // Render the scene again on any key pressed.\r\n            render();\r\n        };\r\n    }\r\n\r\n    function calculateCameraOrbit() {\r\n        // Calculate x,z position/eye of camera orbiting the center.\r\n        var x = 0, y = 1, z = 2;\r\n\r\n        camera.eye[x] = camera.center[x];\r\n        camera.eye[y] = camera.center[y];\r\n        camera.eye[z] = camera.center[z];\r\n        camera.eye[x] += camera.distance * Math.sin(camera.zAngle);\r\n        camera.eye[y] += camera.distance * Math.sin(camera.yAngle);\r\n        camera.eye[z] += camera.distance * Math.cos(camera.zAngle);\r\n    }\r\n\r\n    /**\r\n     * Run the rendering pipeline.\r\n     */\r\n    function render() {\r\n        // Clear framebuffer and depth-/z-buffer.\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        setProjection();\r\n\r\n        mat4.identity(camera.vMatrix);\r\n\r\n        calculateCameraOrbit();\r\n\r\n        // Set view matrix depending on camera.\r\n        mat4.lookAt(camera.vMatrix, camera.eye, camera.center, camera.up);\r\n\r\n        // Loop over models.\r\n        for (let i = 0; i < models.length; i++) {\r\n            // Update modelview for model.\r\n            mat4.copy(models[i].mvMatrix, camera.vMatrix);\r\n\r\n            // Set uniforms for model.\r\n            gl.uniformMatrix4fv(prog.mvMatrixUniform, false,\r\n                models[i].mvMatrix);\r\n\r\n            draw(models[i]);\r\n        }\r\n    }\r\n\r\n    function setProjection() {\r\n        // Set projection Matrix.\r\n        switch (camera.projectionType) {\r\n            case (\"ortho\"):\r\n                let v = camera.lrtb;\r\n                mat4.ortho(camera.pMatrix, -v, v, -v, v, -10, 10);\r\n                break;\r\n        }\r\n        // Set projection uniform.\r\n        gl.uniformMatrix4fv(prog.pMatrixUniform, false, camera.pMatrix);\r\n    }\r\n\r\n    function draw(model) {\r\n        // Setup position VBO.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n        gl.vertexAttribPointer(prog.positionAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        // Setup normal VBO.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n        gl.vertexAttribPointer(prog.normalAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        // Setup rendering tris.\r\n        let fill = (model.fillstyle.search(/fill/) != -1);\r\n        if (fill) {\r\n            gl.enableVertexAttribArray(prog.normalAttrib);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n            gl.drawElements(gl.TRIANGLES, model.iboTris.numberOfElements,\r\n                gl.UNSIGNED_SHORT, 0);\r\n        }\r\n\r\n        // Setup rendering lines.\r\n        let wireframe = (model.fillstyle.search(/wireframe/) != -1);\r\n        if (wireframe) {\r\n            gl.disableVertexAttribArray(prog.normalAttrib);\r\n            gl.vertexAttrib3f(prog.normalAttrib, 0, 0, 0);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n            gl.drawElements(gl.LINES, model.iboLines.numberOfElements,\r\n                gl.UNSIGNED_SHORT, 0);\r\n        }\r\n    }\r\n\r\n    // App interface.\r\n    return {\r\n        start: start\r\n    }\r\n\r\n}());\r\n\r\nexport default App;\r\n","let RecursiveSphere = (function () {\r\n\r\n    let index = 0;\r\n    let vertices = [];\r\n    let normals = [];\r\n    let indicesLines = [];\r\n    let indicesTris = [];\r\n\r\n    let normalize = (x, y, z) => {\r\n        length = Math.sqrt(x * x + y * y + z * z)\r\n        x = x / length\r\n        y = y / length\r\n        z = z / length\r\n        return { x: x, y: y, z: z };\r\n    }\r\n\r\n    let addVertice = (x, y, z) => {\r\n        vertices = [...vertices, x, z, y];\r\n    }\r\n\r\n    let addNormal = (x, y, z) => {\r\n        let length = Math.sqrt(x * x + y * y + z * z)\r\n        x = x / length;\r\n        y = y / length;\r\n        z = z / length;\r\n        normals = [...normals, x, z, y];\r\n    }\r\n\r\n    let addIndicesLine = (n) => {\r\n        indicesLines = [...indicesLines, n];\r\n    }\r\n\r\n    let addIndicesTris = (n) => {\r\n        indicesTris = [...indicesTris, n];\r\n    }\r\n\r\n    let createTetraeder = () => {\r\n        let index = 0;\r\n        let w = 1 / Math.sqrt(3)\r\n        let v1 = { x: w, y: w, z: w },\r\n            v2 = { x: w, y: w, z: -1 * w },\r\n            v3 = { x: w, y: -1 * w, z: -1 * w },\r\n            v4 = { x: w, y: -1 * w, z: w },\r\n            v5 = { x: -1 * w, y: w, z: w },\r\n            v6 = { x: -1 * w, y: w, z: -1 * w },\r\n            v7 = { x: -1 * w, y: -1 * w, z: -1 * w },\r\n            v8 = { x: -1 * w, y: -1 * w, z: w };\r\n    \r\n        // vertices triangle 1\r\n        addVertice(v1.x, v1.y, v1.z);\r\n        addVertice(v3.x, v3.y, v3.z);\r\n        addVertice(v8.x, v8.y, v8.z);\r\n    \r\n        // line indices triangle 1\r\n        addIndicesLine(index);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index);\r\n    \r\n        // tris indices triangle 1\r\n        addIndicesTris(index);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index);\r\n    \r\n        index += 3;\r\n    \r\n        // vertices triangle 2\r\n        addVertice(v1.x, v1.y, v1.z);\r\n        addVertice(v3.x, v3.y, v3.z);\r\n        addVertice(v6.x, v6.y, v6.z);\r\n    \r\n        // line indices triangle 2\r\n        addIndicesLine(index);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index);\r\n    \r\n        // tris indices triangle 2\r\n        addIndicesTris(index);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index);\r\n    \r\n        index += 3;\r\n    \r\n        // vertices triangle 3\r\n        addVertice(v1.x, v1.y, v1.z);\r\n        addVertice(v6.x, v6.y, v6.z);\r\n        addVertice(v8.x, v8.y, v8.z);\r\n    \r\n        // line indices triangle 3\r\n        addIndicesLine(index);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index);\r\n    \r\n        // tris indices triangle 3\r\n        addIndicesTris(index);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index);\r\n    \r\n        index += 3;\r\n    \r\n        // vertices triangle 4\r\n        addVertice(v3.x, v3.y, v3.z);\r\n        addVertice(v6.x, v6.y, v6.z);\r\n        addVertice(v8.x, v8.y, v8.z);\r\n    \r\n        // line indices triangle 4\r\n        addIndicesLine(index);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 1);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index + 2);\r\n        addIndicesLine(index);\r\n    \r\n        // tris indices triangle 4\r\n        addIndicesTris(index);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 2);\r\n        addIndicesTris(index + 1);\r\n        addIndicesTris(index);\r\n    }\r\n\r\n    let createTessellateTriangle = (v1, v2, v3, recursionLevel) => {\r\n        if (recursionLevel > 1) {\r\n            let s1 = { x: 0, y: 0, z: 0 }, s2 = { x: 0, y: 0, z: 0 }, s3 = { x: 0, y: 0, z: 0 };\r\n            // Seitenhalbierende ermitteln\r\n            s1.x = (v2.x + v3.x) / 2\r\n            s1.y = (v2.y + v3.y) / 2\r\n            s1.z = (v2.z + v3.z) / 2\r\n            s2.x = (v1.x + v3.x) / 2\r\n            s2.y = (v1.y + v3.y) / 2\r\n            s2.z = (v1.z + v3.z) / 2\r\n            s3.x = (v1.x + v2.x) / 2\r\n            s3.y = (v1.y + v2.y) / 2\r\n            s3.z = (v1.z + v2.z) / 2\r\n\r\n            // auf Kugeloberfläche projezieren\r\n            // addNormal(s1.x, s1.y, s1.z);\r\n            // addNormal(s2.x, s2.y, s2.z);\r\n            // addNormal(s3.x, s3.y, s3.z);\r\n\r\n            s1 = normalize(s1.x, s1.y, s1.z);\r\n            s2 = normalize(s2.x, s2.y, s2.z);\r\n            s3 = normalize(s3.x, s3.y, s3.z);\r\n\r\n            // rekursiv weiter tessellieren\r\n            createTessellateTriangle(s1, s2, s3, recursionLevel - 1)\r\n            createTessellateTriangle(v1, s3, s2, recursionLevel - 1)\r\n            createTessellateTriangle(s3, v2, s1, recursionLevel - 1)\r\n            createTessellateTriangle(s2, s1, v3, recursionLevel - 1)\r\n        } else {\r\n            // addNormal(s1.x, s1.y, s1.z);\r\n            addNormal(v1.x, v1.y, v1.z);\r\n            addNormal(v2.x, v2.y, v2.z);\r\n            addNormal(v3.x, v3.y, v3.z);\r\n\r\n            addVertice(v1.x, v1.y, v1.z);\r\n            addVertice(v2.x, v2.y, v2.z);\r\n            addVertice(v3.x, v3.y, v3.z);\r\n\r\n            // line indices triangle 1\r\n            addIndicesLine(index);\r\n            addIndicesLine(index + 1);\r\n            addIndicesLine(index + 1);\r\n            addIndicesLine(index + 2);\r\n            addIndicesLine(index + 2);\r\n            addIndicesLine(index);\r\n\r\n            // tris indices triangle 1\r\n            addIndicesTris(index);\r\n            addIndicesTris(index + 1);\r\n            addIndicesTris(index + 2);\r\n\r\n            addIndicesTris(index + 2);\r\n            addIndicesTris(index + 1);\r\n            addIndicesTris(index);\r\n\r\n            index += 3;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let createShape = (recursionLevel = 1) => {\r\n\r\n        index = 0;\r\n        vertices = [];\r\n        normals = [];\r\n        indicesLines = [];\r\n        indicesTris = [];\r\n\r\n        let w = 1 / Math.sqrt(3)\r\n        let v1 = { x: w, y: w, z: w },\r\n            v2 = { x: w, y: w, z: -1 * w },\r\n            v3 = { x: w, y: -1 * w, z: -1 * w },\r\n            v4 = { x: w, y: -1 * w, z: w },\r\n            v5 = { x: -1 * w, y: w, z: w },\r\n            v6 = { x: -1 * w, y: w, z: -1 * w },\r\n            v7 = { x: -1 * w, y: -1 * w, z: -1 * w },\r\n            v8 = { x: -1 * w, y: -1 * w, z: w };\r\n\r\n        createTessellateTriangle(v1, v3, v8, recursionLevel);\r\n        createTessellateTriangle(v1, v3, v6, recursionLevel);\r\n        createTessellateTriangle(v1, v6, v8, recursionLevel);\r\n        createTessellateTriangle(v3, v6, v8, recursionLevel);\r\n\r\n        return { vertices: new Float32Array(vertices), normals: new Float32Array(normals), indicesLines: new Uint16Array(indicesLines), indicesTris: new Uint16Array(indicesTris) };\r\n    }\r\n\r\n    // App interface.\r\n    return {\r\n        createShape: createShape\r\n    }\r\n\r\n}());\r\n\r\nexport default RecursiveSphere;","\r\nimport * as mat4 from 'gl-matrix/esm/mat4.js';\r\n\r\nimport { VertexShader } from './shader/VertexShader.js';\r\nimport { FragmentShader } from './shader/FragmentShader.js';\r\n\r\nimport RecursiveSphere from './shapes/RecursiveSphere.js';\r\n\r\nlet App = (function () {\r\n\r\n    let gl;\r\n\r\n    // The shader program object is also used to\r\n    // store attribute and uniform locations.\r\n    let prog;\r\n\r\n    // Array of model objects.\r\n    let models = [];\r\n\r\n    let camera = {\r\n        // Initial position of the camera.\r\n        eye: [0, 1, 4],\r\n        // Point to look at.\r\n        center: [0, 0, 0],\r\n        // Roll and pitch of the camera.\r\n        up: [0, 1, 0],\r\n        // Opening angle given in radian.\r\n        // radian = degree*2*PI/360.\r\n        fovy: 60.0 * Math.PI / 180,\r\n        // Camera near plane dimensions:\r\n        // value for left right top bottom in projection.\r\n        lrtb: 2.0,\r\n        // View matrix.\r\n        vMatrix: mat4.create(),\r\n        // Projection matrix.\r\n        pMatrix: mat4.create(),\r\n        // Projection types: ortho, perspective, frustum.\r\n        projectionType: \"ortho\",\r\n        // Angle to Z-Axis for camera when orbiting the center\r\n        // given in radian.\r\n        zAngle: 0,\r\n        // Angle to Z-Axis for camera when orbiting the center\r\n        // given in radian.\r\n        yAngle: 0,\r\n        // Distance in XZ-Plane from center when orbiting.\r\n        distance: 4,\r\n    };\r\n\r\n    function start() {\r\n        init();\r\n        render();\r\n    }\r\n\r\n    function init() {\r\n        initWebGL();\r\n        initShaderProgram();\r\n        initUniforms()\r\n        initModels();\r\n        initEventHandler();\r\n        initPipline();\r\n    }\r\n\r\n    function initWebGL() {\r\n        // Get canvas and WebGL context.\r\n        // canvas = document.getElementById('canvas1');\r\n        let canvas = document.querySelector('#canvas2');\r\n        gl = canvas.getContext('webgl');\r\n        gl.viewportWidth = canvas.width;\r\n        gl.viewportHeight = canvas.height;\r\n    }\r\n\r\n    /**\r\n     * Init pipeline parameters that will not change again.\r\n     * If projection or viewport change, their setup must\r\n     * be in render function.\r\n     */\r\n    function initPipline() {\r\n        gl.clearColor(.95, .95, .95, 1);\r\n\r\n        // Backface culling.\r\n        gl.frontFace(gl.CCW);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n\r\n        // Depth(Z)-Buffer.\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        // Polygon offset of rastered Fragments.\r\n        gl.enable(gl.POLYGON_OFFSET_FILL);\r\n        gl.polygonOffset(0.5, 0);\r\n\r\n        // Set viewport.\r\n        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\r\n\r\n        // Init camera.\r\n        // Set projection aspect ratio.\r\n        camera.aspect = gl.viewportWidth / gl.viewportHeight;\r\n    }\r\n\r\n    function initShaderProgram() {\r\n        // Init vertex shader.\r\n        let vs = initShader(gl.VERTEX_SHADER, VertexShader);\r\n        // Init fragment shader.\r\n        let fs = initShader(gl.FRAGMENT_SHADER, FragmentShader);\r\n        // Link shader into a shader program.\r\n        prog = gl.createProgram();\r\n        gl.attachShader(prog, vs);\r\n        gl.attachShader(prog, fs);\r\n        gl.bindAttribLocation(prog, 0, \"aPosition\");\r\n        gl.linkProgram(prog);\r\n        gl.useProgram(prog);\r\n    }\r\n\r\n    /**\r\n     * Create and init shader from source.\r\n     * \r\n     * @parameter shaderType: openGL shader type.\r\n     * @parameter SourceTagId: Id of HTML Tag with shader source.\r\n     * @returns shader object.\r\n     */\r\n    function initShader(shaderType, shaderSource) {\r\n        let shader = gl.createShader(shaderType);\r\n        // let shaderSource = document.getElementById(SourceTagId).text;\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log(SourceTagId + \": \" + gl.getShaderInfoLog(shader));\r\n            return null;\r\n        }\r\n        return shader;\r\n    }\r\n\r\n    function initUniforms() {\r\n        // Projection Matrix.\r\n        prog.pMatrixUniform = gl.getUniformLocation(prog, \"uPMatrix\");\r\n\r\n        // Model-View-Matrix.\r\n        prog.mvMatrixUniform = gl.getUniformLocation(prog, \"uMVMatrix\");\r\n    }\r\n\r\n    function initModels() {\r\n        // fill-style\r\n        let fs = \"fillwireframe\";\r\n        createModel(RecursiveSphere.createShape(1), fs);\r\n    }\r\n\r\n    /**\r\n     * Create model object, fill it and push it in models array.\r\n     * \r\n     * @parameter geometryname: string with name of geometry.\r\n     * @parameter fillstyle: wireframe, fill, fillwireframe.\r\n     */\r\n    function createModel(geometry, fillstyle) {\r\n        let model = {};\r\n        model.fillstyle = fillstyle;\r\n        initDataAndBuffers(model, geometry);\r\n        // Create and initialize Model-View-Matrix.\r\n        model.mvMatrix = mat4.create();\r\n\r\n        models.push(model);\r\n    }\r\n\r\n    /**\r\n     * Init data and buffers for model object.\r\n     * \r\n     * @parameter model: a model object to augment with data.\r\n     * @parameter geometryname: string with name of geometry.\r\n     */\r\n    function initDataAndBuffers(model, geometry) {\r\n        // Provide model object with vertex data arrays.\r\n        // Fill data arrays for Vertex-Positions, Normals, Index data:\r\n        // vertices, normals, indicesLines, indicesTris;\r\n        // Pointer this refers to the window.\r\n        // this[geometryname]['createVertexData'].apply(model);\r\n        Object.assign(model, geometry);\r\n\r\n        // Setup position vertex buffer object.\r\n        model.vboPos = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n        gl.bufferData(gl.ARRAY_BUFFER, model.vertices, gl.STATIC_DRAW);\r\n        // Bind vertex buffer to attribute variable.\r\n        prog.positionAttrib = gl.getAttribLocation(prog, 'aPosition');\r\n        gl.enableVertexAttribArray(prog.positionAttrib);\r\n\r\n        // Setup normal vertex buffer object.\r\n        model.vboNormal = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n        gl.bufferData(gl.ARRAY_BUFFER, model.normals, gl.STATIC_DRAW);\r\n        // Bind buffer to attribute variable.\r\n        prog.normalAttrib = gl.getAttribLocation(prog, 'aNormal');\r\n        gl.enableVertexAttribArray(prog.normalAttrib);\r\n\r\n        // Setup lines index buffer object.\r\n        model.iboLines = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesLines,\r\n            gl.STATIC_DRAW);\r\n        model.iboLines.numberOfElements = model.indicesLines.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        // Setup triangle index buffer object.\r\n        model.iboTris = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesTris,\r\n            gl.STATIC_DRAW);\r\n        model.iboTris.numberOfElements = model.indicesTris.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n\r\n    function initEventHandler() {\r\n\r\n        let slider = document.querySelector('#tessellationSlider');\r\n\r\n        slider.onchange = (evt) => {\r\n            let tesNumber = parseInt(evt.target.value);\r\n\r\n            models = [];\r\n            // fill-style\r\n            let fs = \"fillwireframe\";\r\n            createModel(RecursiveSphere.createShape(tesNumber), fs);\r\n\r\n            // Render the scene again on any key pressed.\r\n            render();\r\n        }\r\n    }\r\n\r\n    function calculateCameraOrbit() {\r\n        // Calculate x,z position/eye of camera orbiting the center.\r\n        var x = 0, y = 1, z = 2;\r\n\r\n        camera.eye[x] = camera.center[x];\r\n        camera.eye[y] = camera.center[y];\r\n        camera.eye[z] = camera.center[z];\r\n        camera.eye[x] += camera.distance * Math.sin(camera.zAngle);\r\n        camera.eye[y] += camera.distance * Math.sin(camera.yAngle);\r\n        camera.eye[z] += camera.distance * Math.cos(camera.zAngle);\r\n    }\r\n\r\n    /**\r\n     * Run the rendering pipeline.\r\n     */\r\n    function render() {\r\n        // Clear framebuffer and depth-/z-buffer.\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        setProjection();\r\n\r\n        mat4.identity(camera.vMatrix);\r\n\r\n        calculateCameraOrbit();\r\n\r\n        // Set view matrix depending on camera.\r\n        mat4.lookAt(camera.vMatrix, camera.eye, camera.center, camera.up);\r\n\r\n        // Loop over models.\r\n        for (let i = 0; i < models.length; i++) {\r\n            // Update modelview for model.\r\n            mat4.copy(models[i].mvMatrix, camera.vMatrix);\r\n\r\n            // Set uniforms for model.\r\n            gl.uniformMatrix4fv(prog.mvMatrixUniform, false,\r\n                models[i].mvMatrix);\r\n\r\n            draw(models[i]);\r\n        }\r\n    }\r\n\r\n    function setProjection() {\r\n        // Set projection Matrix.\r\n        switch (camera.projectionType) {\r\n            case (\"ortho\"):\r\n                let v = camera.lrtb;\r\n                mat4.ortho(camera.pMatrix, -v, v, -v, v, -10, 10);\r\n                break;\r\n        }\r\n        // Set projection uniform.\r\n        gl.uniformMatrix4fv(prog.pMatrixUniform, false, camera.pMatrix);\r\n    }\r\n\r\n    function draw(model) {\r\n        // Setup position VBO.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n        gl.vertexAttribPointer(prog.positionAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        // Setup normal VBO.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n        gl.vertexAttribPointer(prog.normalAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        // Setup rendering tris.\r\n        let fill = (model.fillstyle.search(/fill/) != -1);\r\n        if (fill) {\r\n            gl.enableVertexAttribArray(prog.normalAttrib);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n            gl.drawElements(gl.TRIANGLES, model.iboTris.numberOfElements,\r\n                gl.UNSIGNED_SHORT, 0);\r\n        }\r\n\r\n        // Setup rendering lines.\r\n        let wireframe = (model.fillstyle.search(/wireframe/) != -1);\r\n        if (wireframe) {\r\n            gl.disableVertexAttribArray(prog.normalAttrib);\r\n            gl.vertexAttrib3f(prog.normalAttrib, 1, 0, 0);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n            gl.drawElements(gl.LINES, model.iboLines.numberOfElements,\r\n                gl.UNSIGNED_SHORT, 0);\r\n        }\r\n    }\r\n\r\n    // App interface.\r\n    return {\r\n        start: start\r\n    }\r\n\r\n}());\r\n\r\nexport default App;\r\n","import App1 from './App1.js';\r\nimport App2 from './App2.js';\r\n\r\ndocument.body.onload = () => {\r\n    App1.start();\r\n    App2.start();\r\n};"],"names":["glMatrix.ARRAY_TYPE","glMatrix.EPSILON","mat4.create","mat4.identity","mat4.lookAt","mat4.copy","mat4.ortho","App","App1","App2"],"mappings":"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"}